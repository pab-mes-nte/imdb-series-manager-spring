package util;

import model.entities.*;
import model.repositories.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Calendar;

public class SeriesRandomizer {
    // Data
    SeriesRandData data = new SeriesRandData();

    // TODO: Remove Unused Repositories
    private final SeriesRepository seriesRep;
    private final ActorRepository actorRep;
    private final CategoryRepository categoryRep;
    private final CountryRepository countryRep;
    private final DirectorRepository directorRep;
    private final LanguageRepository languageRep;
    private final RatingRepository ratingRep;
    private final SeriesLogRepository logRep;
    private final WriterRepository writerRep;

    public SeriesRandomizer(SeriesRepository seriesRep, ActorRepository actorRep, CategoryRepository categoryRep, CountryRepository countryRep, DirectorRepository directorRep, LanguageRepository languageRep, RatingRepository ratingRep, SeriesLogRepository logRep, WriterRepository writerRep) {
        this.seriesRep = seriesRep;
        this.actorRep = actorRep;
        this.categoryRep = categoryRep;
        this.countryRep = countryRep;
        this.directorRep = directorRep;
        this.languageRep = languageRep;
        this.ratingRep = ratingRep;
        this.logRep = logRep;
        this.writerRep = writerRep;
    }

    public void randomize() {
        // Insert of all actors
        for (String name : data.actors) {
            actorRep.save(new Actor(name));
        }

        // Insert of all categories
        for (String name : data.categories) {
            categoryRep.save(new Category(name));
        }

        // Insert of all countries
        for (String name : data.countries) {
            countryRep.save(new Country(name));
        }

        // Insert of all directors
        for (String name : data.directors) {
            directorRep.save(new Director(name));
        }

        // Insert of all languages
        for (String name : data.languages) {
            languageRep.save(new Language(name));
        }

        // Insert of all writers
        for (String name : data.writers) {
            writerRep.save(new Writer(name));
        }

        // Insert of all series
        for (String s : data.series) {
            Series serie = new Series(s, data.contentRatings[(int) (Math.random() * data.contentRatings.length)], LocalDate.of((int) (Math.random() * 124 + 1900), (int) (Math.random() * 12 + 1), (int) (Math.random() * 28 + 1)), "I'm not going to randomize a plot. Generated by M.", "Same for the awards, I'm too lazy.", null, (int) (Math.random() * 100 + 1), (int) (Math.random() * 100 + 1), (int) (Math.random() * 1000000), (int) (Math.random() * 10 + 1));

            // Randomized number of child objects
            int n = 0;
            Long[] chIndex = null;

            // Actors
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.actors.length + 1);
            }
            serie.setActorsList(actorRep.findByIdIn(Arrays.asList(chIndex)));

            // Categories
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.categories.length + 1);
            }
            serie.setCategoriesList(categoryRep.findByIdIn(Arrays.asList(chIndex)));

            // Countries
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.countries.length + 1);
            }
            serie.setCountriesList(countryRep.findByIdIn(Arrays.asList(chIndex)));

            // Directors
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.directors.length + 1);
            }
            serie.setDirectorsList(directorRep.findByIdIn(Arrays.asList(chIndex)));

            // Languages
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.languages.length + 1);
            }
            serie.setLanguagesList(languageRep.findByIdIn(Arrays.asList(chIndex)));

            // Writers
            n = (int) (Math.random() * 4);
            chIndex = new Long[n];
            for (int i = 0; i < n; i++) {
                chIndex[i] = (long) (Math.random() * data.writers.length + 1);
            }
            serie.setWritersList(writerRep.findByIdIn(Arrays.asList(chIndex)));

            seriesRep.save(serie);
        }
    }
}
